namespace = AgaEvent
########################################
########################################
#####                              #####
#####    Auto Gene Assimilation    #####
#####                              #####
#####    events                    #####
#####                              #####
########################################
########################################
#	
#	00xx	Pulse, Initialization, Assimilation
#		0001	Pulse Event (on_monthly_pulse)
#		0002	Initialization of Policy (Checked Every Month & on_tech_increased)
#		0011	Assimilation (Every Month)
#	01xx	Flag Control
#		0110	Pulse Event (on_modification_complete)
#		0111	Set Flag when Species Modified Manually
#		0121	Varidation of Flags for Case of Flags Unfound
#		0122	Varidation of Flags for Case of Multiplex Flags
#	
####################################
###  Pulse, Assimilation Events  ###
####################################
### Pulse Event (on_monthly_pulse)
event = {
	id = AgaEvent.0001
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		every_playable_country = {
			limit = {
				AgaTriggerPotentialCountry = yes
			}
			country_event = {
				id = AgaEvent.0002
				days = 3
			}
			country_event = {
				id = AgaEvent.0121
				days = 23
			}
			country_event = {
				id = AgaEvent.0122
				days = 24
			}
			country_event = {
				id = AgaEvent.0011
				days = 25
			}
		}
	}
}

### Initialization of Policy, Triggered by AgaEvent.0001 (on_monthly_pulse), on_tech_increased
country_event = {
	id = AgaEvent.0002
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		NOT = {
			has_country_flag = AgaFlagModActivatedCountry
		}
		AgaTriggerPossibleCountry = yes
	}
	immediate = {
		set_country_flag = AgaFlagModActivatedCountry
		if = {
			limit = {
				always = @AgaConstDefaultPolicy_Forced
				AgaTriggerCheckSocietyResearchIncome = yes
			}
			set_policy = {
				policy = AgaPolicyGeneAssimilation
				option = AgaPolicyGeneAssimilationForced
				cooldown = no
			}
		}
		else_if = {
			limit = {
				always = @AgaConstDefaultPolicy_Allowed
				AgaTriggerCheckSocietyResearchIncome = yes
			}
			set_policy = {
				policy = AgaPolicyGeneAssimilation
				option = AgaPolicyGeneAssimilationAllowed
				cooldown = no
			}
		}
		else = {
			set_policy = {
				policy = AgaPolicyGeneAssimilation
				option = AgaPolicyGeneAssimilationForbidden
				cooldown = no
			}
		}
	}
}

### Assimilation
country_event = {
	id = AgaEvent.0011
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_policy_flag = AgaFlagGeneAssimilationAllowed		# Legacy: has_country_flag = AgaFlagCountryAssimilateGene
		AgaTriggerPossibleCountry = yes
	}
	immediate = {
		### Check Society Research, Set Capacity Variable, Set Modifier if Assimilation NOT Done
		set_variable = {
			which = AgaVarGeneAssimilationCapacity
			value = AgaVarGeneAssimilationProcessed
		}
		if = {
			limit = {
				NOT = {
					AgaTriggerPossibleCountry = yes
				}
			}
			### For Case of Country Lost Potential of Gene Assimilation (e.g. Synthetic Empire)
			AgaEffectClearGeneAssimilationModifier = yes
			set_policy = {
				policy = AgaPolicyGeneAssimilation
				option = AgaPolicyGeneAssimilationForbidden
				cooldown = no
			}
		}
		else_if = {
			limit = {
				NOT = {
					any_owned_pop_species = {
						AgaTriggerGeneAssimilationStandardSpecies = yes
					}
				}
			}
			### For Case of Assimilation Has Finished
			set_variable = {
				which = AgaVarGeneAssimilationCapacity
				value = 0
			}
			AgaEffectClearGeneAssimilationModifier = yes
			add_modifier = {
				modifier = AgaModifierGeneAssimilated_0a
				days = -1
			}
		}
		else_if = {
			limit = {
				has_monthly_income = {
					resource = society_research
					value < 1
				}
			}
			## For Case of Lack of Society Research
			set_variable = {
				which = AgaVarGeneAssimilationCapacity
				value = 0
			}
			AgaEffectClearGeneAssimilationModifier = yes
			add_modifier = {
				modifier = AgaModifierGeneAssimilated_0b
				days = -1
			}
			## Lack of Society Research
		}
		else = {
			### Check Society Research, Set Capacity
			if = {
				limit = {
					has_monthly_income = {
						resource = society_research
						value >= @AgaConstSocietyResearchForGeneAssimilation_3P
					}
				}
				change_variable = {
					which = AgaVarGeneAssimilationCapacity
					value = 3
				}
			}
			else_if = {
				limit = {
					has_monthly_income = {
						resource = society_research
						value >= @AgaConstSocietyResearchForGeneAssimilation_2P
					}
				}
				change_variable = {
					which = AgaVarGeneAssimilationCapacity
					value = 2
				}
			}
			else_if = {
				limit = {
					has_monthly_income = {
						resource = society_research
						value >= @AgaConstSocietyResearchForGeneAssimilation_1P
					}
				}
				change_variable = {
					which = AgaVarGeneAssimilationCapacity
					value = 1
				}
			}
			if = {
				limit = {
					check_variable = {
						which = AgaVarGeneAssimilationCapacity
						value > 3
					}
				}
				set_variable = {
					which = AgaVarGeneAssimilationCapacity
					value = 3
				}
			}
			### Gene Assimilation
			set_variable = {
				which = AgaVarGeneAssimilationProcessed
				value = 0
			}
			while = {
				limit = {
					check_variable = {
						which = AgaVarGeneAssimilationCapacity
						value > 0.5
					}
				}
				random_owned_pop_species = {
					limit = {
						AgaTriggerGeneAssimilationStandardSpecies = yes
					}
					root = {
						random_owned_pop = {
							limit = {
								is_being_purged = no
								species = {
									is_same_species = prevprevprev
									NOT = {
										is_exact_same_species = prevprevprev
									}
									AgaTriggerPotentialSpecies = yes
								}
							}
							change_species = prevprev
							root = {
								change_variable = {
									which = AgaVarGeneAssimilationProcessed
									value = 1
								}
							}
						}
					}
				}
				change_variable = {
					which = AgaVarGeneAssimilationCapacity
					value = -1
				}
			}
			### Set Modifier
			AgaEffectClearGeneAssimilationModifier = yes
			if = {
				limit = {
					check_variable = {
						which = AgaVarGeneAssimilationProcessed
						value > 2.5
					}
				}
				add_modifier = {
					modifier = AgaModifierGeneAssimilated_3
					days = -1
				}
			}
			else_if = {
				limit = {
					check_variable = {
						which = AgaVarGeneAssimilationProcessed
						value > 1.5
					}
				}
				add_modifier = {
					modifier = AgaModifierGeneAssimilated_2
					days = -1
				}
			}
			else_if = {
				limit = {
					check_variable = {
						which = AgaVarGeneAssimilationProcessed
						value > 0.5
					}
				}
				add_modifier = {
					modifier = AgaModifierGeneAssimilated_1
					days = -1
				}
			}
			else = {
				add_modifier = {
					modifier = AgaModifierGeneAssimilated_0a
					days = -1
				}
			}
			## Assimilation Has Finished (Backup Code)
		}
	}
}

#################################
###  Species Flag Management  ###
#################################
### Pulse Event (on_modification_complete), Scopes: this = country, from = species (post modification)
country_event = {
	id = AgaEvent.0110
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		country_event = {
			id = AgaEvent.0111
			days = 1
		}
	}
}

### Set Flag when Species Modified Manually, Scopes: this/from = country, fromfrom = species (post modification)
country_event = {
	id = AgaEvent.0111
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		OR = {
			AND = {
				has_policy_flag = AgaFlagGeneAssimilationAllowed
				AgaTriggerPossibleCountry = yes
			}
			AND = {
				always = @AgaConstResetFlagWhenGeneAssimilationForbidden
				AgaTriggerPotentialCountry = yes
			}
		}
		fromfrom = {
			AgaTriggerPotentialSpecies = yes
			NOT = {
				has_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
			}
		}
	}
	immediate = {
		every_country = {
			limit = {
				any_owned_pop_species = {
					always = yes
				}
			}
			every_owned_pop_species = {
				limit = {
					has_species_flag = AgaFlagGeneAssimilationStandardSpecies@root					## but not @prev
					is_same_species = fromfrom
				}
				remove_species_flag = AgaFlagGeneAssimilationStandardSpecies@root				## but not @prev
			}
		}
		fromfrom = {
			set_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
		}
	}
}

### Varidation of Flags: for the case of no sub-species having standard species flag
country_event = {
	id = AgaEvent.0121
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_policy_flag = AgaFlagGeneAssimilationForced
		AgaTriggerPossibleCountry = yes
		any_owned_pop_species = {
			AgaTriggerPotentialSpecies = yes
			NOT = {
				root = {
					any_owned_pop_species = {
						is_same_species = prevprev
						has_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
					}
				}
			}
		}
	}
	immediate = {
		every_owned_pop_species = {
			limit = {
				AgaTriggerPotentialSpecies = yes
				NOT = {
					root = {
						any_owned_pop_species = {
							is_same_species = prevprev
							has_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
						}
					}
				}
			}
			### BEGIN TEMPLATE:species_selector ###
			if = {
				limit = {
					root = {
						count_owned_pop = {
							count >= 5000
							limit = {
								is_being_purged = no
								OR = {
									is_same_species = prev
									is_subspecies = prev
								}
							}
						}
					}
				}
				root = {
					random_owned_pop_species = {
						limit = {
							count_pops = {
								count >= 5000
								limit = {
									is_being_purged = no
									OR = {
										is_same_species = prevprev
										is_subspecies = prevprev
									}
								}
							}
						}
						root = {
							### Sets flags to all species once and then 0112 sifts out flags for unsuitable species.
							every_owned_pop_species = {
								limit = {
									is_same_species = prevprevprevprev
								}
								set_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
							}
						}
					}
				}
			}
			### END TEMPLATE:species_selector ###	
		}
	}
}

### Varidation of Flags: for the case of plural sub-species having standard species flag
country_event = {
	id = AgaEvent.0122
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_policy_flag = AgaFlagGeneAssimilationAllowed		# Legacy: has_country_flag = AgaFlagCountryAssimilateGene
		AgaTriggerPossibleCountry = yes
		any_owned_pop_species = {
			has_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
			root = {
				any_owned_pop_species = {
					is_same_species = prevprev
					has_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
					NOT = {
						is_exact_same_species = prevprev
					}
				}
			}
		}
	}
	immediate = {
		random_owned_pop_species = {
			limit = {
				has_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
				root = {
					any_owned_pop_species = {
						is_same_species = prevprev
						has_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
						NOT = {
							is_exact_same_species = prevprev
						}
					}
				}
			}
			root = {
				### Ascension Traits Have Priority
				if = {
					limit = {
						any_owned_pop_species = {
							is_same_species = prevprev
							has_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
							OR = {
								has_trait = trait_cybernetic
								has_trait = trait_psionic
							}
						}
					}
					every_owned_pop_species = {
						limit = {
							is_same_species = prevprev
							has_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
							NOR = {
								has_trait = trait_cybernetic
								has_trait = trait_psionic
							}
						}
						remove_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
					}
				}
				else_if = {
					limit = {
						any_owned_pop_species = {
							is_same_species = prevprev
							has_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
							has_trait = trait_psionic
						}
					}
					every_owned_pop_species = {
						limit = {
							is_same_species = prevprev
							has_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
							NOT = {
								has_trait = trait_psionic
							}
						}
						remove_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
					}
				}
				### Species with Many Trait Points Have Priority
				if = {
					limit = {
						any_owned_pop_species = {
							is_same_species = prevprev
							has_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
							num_trait_points > 9
						}
					}
					random_owned_pop_species = {
						limit = {
							is_same_species = prevprev
							has_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
							num_trait_points > 9
						}
						root = {
							every_owned_pop_species = {
								limit = {
									is_same_species = prevprev
									has_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
									NOT = {
										is_exact_same_species = prevprev
									}
								}
								remove_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
							}
						}
					}
				}
				else_if = {
					limit = {
						any_owned_pop_species = {
							is_same_species = prevprev
							has_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
							num_trait_points > 8
						}
					}
					random_owned_pop_species = {
						limit = {
							is_same_species = prevprev
							has_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
							num_trait_points > 8
						}
						root = {
							every_owned_pop_species = {
								limit = {
									is_same_species = prevprev
									has_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
									NOT = {
										is_exact_same_species = prevprev
									}
								}
								remove_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
							}
						}
					}
				}
				else_if = {
					limit = {
						any_owned_pop_species = {
							is_same_species = prevprev
							has_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
							num_trait_points > 7
						}
					}
					random_owned_pop_species = {
						limit = {
							is_same_species = prevprev
							has_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
							num_trait_points > 7
						}
						root = {
							every_owned_pop_species = {
								limit = {
									is_same_species = prevprev
									has_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
									NOT = {
										is_exact_same_species = prevprev
									}
								}
								remove_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
							}
						}
					}
				}
				else_if = {
					limit = {
						any_owned_pop_species = {
							is_same_species = prevprev
							has_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
							num_trait_points > 6
						}
					}
					random_owned_pop_species = {
						limit = {
							is_same_species = prevprev
							has_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
							num_trait_points > 6
						}
						root = {
							every_owned_pop_species = {
								limit = {
									is_same_species = prevprev
									has_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
									NOT = {
										is_exact_same_species = prevprev
									}
								}
								remove_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
							}
						}
					}
				}
				else_if = {
					limit = {
						any_owned_pop_species = {
							is_same_species = prevprev
							has_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
							num_trait_points > 5
						}
					}
					random_owned_pop_species = {
						limit = {
							is_same_species = prevprev
							has_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
							num_trait_points > 5
						}
						root = {
							every_owned_pop_species = {
								limit = {
									is_same_species = prevprev
									has_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
									NOT = {
										is_exact_same_species = prevprev
									}
								}
								remove_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
							}
						}
					}
				}
				else_if = {
					limit = {
						any_owned_pop_species = {
							is_same_species = prevprev
							has_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
							num_trait_points > 4
						}
					}
					random_owned_pop_species = {
						limit = {
							is_same_species = prevprev
							has_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
							num_trait_points > 4
						}
						root = {
							every_owned_pop_species = {
								limit = {
									is_same_species = prevprev
									has_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
									NOT = {
										is_exact_same_species = prevprev
									}
								}
								remove_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
							}
						}
					}
				}
				else_if = {
					limit = {
						any_owned_pop_species = {
							is_same_species = prevprev
							has_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
							num_trait_points > 3
						}
					}
					random_owned_pop_species = {
						limit = {
							is_same_species = prevprev
							has_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
							num_trait_points > 3
						}
						root = {
							every_owned_pop_species = {
								limit = {
									is_same_species = prevprev
									has_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
									NOT = {
										is_exact_same_species = prevprev
									}
								}
								remove_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
							}
						}
					}
				}
				else_if = {
					limit = {
						any_owned_pop_species = {
							is_same_species = prevprev
							has_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
							num_trait_points > 2
						}
					}
					random_owned_pop_species = {
						limit = {
							is_same_species = prevprev
							has_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
							num_trait_points > 2
						}
						root = {
							every_owned_pop_species = {
								limit = {
									is_same_species = prevprev
									has_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
									NOT = {
										is_exact_same_species = prevprev
									}
								}
								remove_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
							}
						}
					}
				}
				else_if = {
					limit = {
						any_owned_pop_species = {
							is_same_species = prevprev
							has_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
							num_trait_points > 1
						}
					}
					random_owned_pop_species = {
						limit = {
							is_same_species = prevprev
							has_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
							num_trait_points > 1
						}
						root = {
							every_owned_pop_species = {
								limit = {
									is_same_species = prevprev
									has_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
									NOT = {
										is_exact_same_species = prevprev
									}
								}
								remove_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
							}
						}
					}
				}
				else = {
					random_owned_pop_species = {
						limit = {
							is_same_species = prevprev
							has_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
						}
						root = {
							every_owned_pop_species = {
								limit = {
									is_same_species = prevprev
									has_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
									NOT = {
										is_exact_same_species = prevprev
									}
								}
								remove_species_flag = AgaFlagGeneAssimilationStandardSpecies@root
							}
						}
					}
				}
				country_event = {
					id = AgaEvent.0122
				}
				## Re-trigger this event for next species since random_owned_pop_species is used, but not every_.
			}
		}
	}
}
